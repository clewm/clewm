{"title":"可复用代码","uid":"a790fe72b285743baec96ab6632ed42e","slug":"Java/可复用代码","date":"2022-11-02T01:20:37.454Z","updated":"2022-11-03T23:41:52.931Z","comments":true,"path":"api/articles/Java/可复用代码.json","keywords":null,"cover":"https://md-1259549904.cos.ap-shanghai.myqcloud.com/img/%E5%8F%A4%E9%A3%8E%20%E5%B1%85%E5%A3%AB%20%E9%BB%91%E7%99%BD%20%E7%BE%8E%E5%A5%B3%20%E5%A3%81%E7%BA%B8%204k_%E5%BD%BC%E5%B2%B8%E5%9B%BE%E7%BD%91.jpg","content":"<p>记录了一些可复用的代码，避免重复编写浪费精力。</p>\n<span id=\"more\"></span>\n\n\n\n<p><img src=\"https://md-1259549904.cos.ap-shanghai.myqcloud.com/img/%E5%8F%A4%E9%A3%8E%20%E5%B1%85%E5%A3%AB%20%E9%BB%91%E7%99%BD%20%E7%BE%8E%E5%A5%B3%20%E5%A3%81%E7%BA%B8%204k_%E5%BD%BC%E5%B2%B8%E5%9B%BE%E7%BD%91.jpg\" alt=\"古风 居士 黑白 美女 壁纸 4k_彼岸图网\"></p>\n<h1 id=\"可复用代码\"><a href=\"#可复用代码\" class=\"headerlink\" title=\"可复用代码\"></a>可复用代码</h1><h2 id=\"结果类：\"><a href=\"#结果类：\" class=\"headerlink\" title=\"结果类：\"></a>结果类：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.clewm.lcss.res;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class R implements Serializable&#123;\n\n    public String info;\n\n    public Object data;\n\n    public Integer code;\n\n    public Boolean flag;\n\n\n    &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;\n    &#x2F;&#x2F; TODO 成功\n    &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;\n    public static R ok()&#123;\n        return new R(ResCode.SUCCESS.getMsg(),null,ResCode.SUCCESS.getCode(),true);\n    &#125;\n\n    public static R ok(String info)&#123;\n        return new R(info,null,ResCode.SUCCESS.getCode(),true);\n    &#125;\n\n    public static R ok(Object data)&#123;\n        return new R(ResCode.SUCCESS.getMsg(),data,ResCode.SUCCESS.getCode(),true);\n    &#125;\n\n    public static R ok(String info,Object data)&#123;\n        return new R(info,data,ResCode.SUCCESS.getCode(),true);\n    &#125;\n\n    &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;\n    &#x2F;&#x2F; TODO 失败\n    &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;\n\n    public static R fail()&#123;\n        return new R(ResCode.FAIL.getMsg(),null,ResCode.FAIL.getCode(),false);\n    &#125;\n\n    public static R fail(String info)&#123;\n        return new R(info,null,ResCode.FAIL.getCode(),false);\n    &#125;\n\n    public static R fail(Object data)&#123;\n        return new R(ResCode.FAIL.getMsg(),data,ResCode.FAIL.getCode(),false);\n    &#125;\n\n    public static R fail(ResCode code) &#123;\n        return new R(code.getMsg(),null,code.getCode(),false);\n    &#125;\n\n    public static R fail(String info,Object data)&#123;\n        return new R(info,data,ResCode.FAIL.getCode(),false);\n    &#125;\n\n    public static R fail(Object data,ResCode code) &#123;\n        return new R(code.getMsg(),data,code.getCode(),false);\n    &#125;\n\n    &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;\n    &#x2F;&#x2F; TODO 异常\n    &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;\n\n    public static R error() &#123;\n        return new R(ResCode.ERROR.getMsg(),null,ResCode.ERROR.getCode(),false);\n    &#125;\n\n    public static R error(String info) &#123;\n        return new R(info,null,ResCode.ERROR.getCode(),false);\n    &#125;\n\n    public static R error(ResCode code) &#123;\n        return new R(code.getMsg(),null,code.getCode(),false);\n    &#125;\n\n    public static R error(Object data,ResCode code) &#123;\n        return new R(code.getMsg(),data,code.getCode(),false);\n    &#125;\n&#125;\n</code></pre>\n\n<h2 id=\"状态码：\"><a href=\"#状态码：\" class=\"headerlink\" title=\"状态码：\"></a>状态码：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.clewm.lcss.res;\n\n\npublic enum ResCode &#123;\n    &#x2F;&#x2F;基础类型\n    SUCCESS(200,&quot;成功！&quot;),\n    FAIL(500,&quot;失败！&quot;),\n    ERROR(400,&quot;出现异常！&quot;),\n\n    &#x2F;&#x2F;自定义类型\n    NOT_LOGIN(435,&quot;用户未登录！&quot;);\n\n    private Integer code;\n    private String msg;\n\n    ResCode(Integer code,String msg)&#123;\n        this.code &#x3D; code;\n        this.msg &#x3D; msg;\n    &#125;\n\n    public Integer getCode() &#123;\n        return code;\n    &#125;\n\n    public String getMsg() &#123;\n        return msg;\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return code + &quot;-&quot; + msg;\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"控制层的基本增删改查代码：\"><a href=\"#控制层的基本增删改查代码：\" class=\"headerlink\" title=\"控制层的基本增删改查代码：\"></a>控制层的基本增删改查代码：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Resource\nprivate DetailService detailService;\n\n@GetMapping(&quot;&#x2F;test&quot;)\npublic R test() &#123;\n    return R.error(ResCode.NOT_LOGIN);\n&#125;\n\n@GetMapping(&quot;&#x2F;&#123;detailId&#125;&quot;)\n@Cacheable(value &#x3D; &quot;detailInfo&quot;,key &#x3D; &quot;#detailId&quot;)\npublic R getDetailInfo(@PathVariable String detailId) &#123;\n    Detail detail &#x3D; detailService.getById(detailId);\n    DetailVO detailVO &#x3D; DetailConvert.INSTANCE.po2vo(detail);\n    return R.ok(detailVO);\n&#125;\n\n@GetMapping(&quot;&#x2F;del&#x2F;&#123;detailId&#125;&quot;)\n@CacheEvict(value &#x3D; &quot;detailInfo&quot;,key &#x3D; &quot;#detailId&quot;)\npublic R delDetail(@PathVariable String detailId) &#123;\n    boolean res &#x3D; detailService.removeById(detailId);\n    return res ? R.ok(&quot;删除成功！&quot;) : R.fail(&quot;删除失败！&quot;);\n&#125;\n\n@PostMapping(&quot;&#x2F;update&#x2F;&quot;)\n@CachePut(value &#x3D; &quot;detailInfo&quot;,key &#x3D; &quot;#detailDTO.getId()&quot;)\npublic R updateDetail(@RequestBody @Validated DetailDTO detailDTO) &#123;\n    Detail detail &#x3D; DetailConvert.INSTANCE.dto2po(detailDTO);\n    boolean res &#x3D; detailService.update(detail, null);\n    return res ? R.ok(&quot;更新成功！&quot;,detail) : R.fail(&quot;更新失败！&quot;);\n&#125;\n\n@PostMapping\npublic R add(@RequestBody @Validated DetailDTO detailDTO) &#123;\n    Detail detail &#x3D; detailService.add(detailDTO);\n    log.info(detail.toString());\n    DetailVO detailVO &#x3D; DetailConvert.INSTANCE.po2vo(detail);\n    return ObjectUtils.isEmpty(detailVO.getId()) ? R.fail() : R.ok(detailVO);\n&#125;</code></pre>\n\n<p><strong>只需把detail换成业务实体名即可</strong></p>\n<p>业务层的基本增删改查代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Autowired\nprivate DetailMapper detailMapper;\n\n@Override\npublic Detail add(DetailDTO detailDTO) &#123;\n    return Optional.ofNullable(detailDTO).map(d -&gt; &#123;\n        Detail detail &#x3D; DetailConvert.INSTANCE.dto2po(d);\n        detailMapper.insert(detail);\n        return detail;\n    &#125;).orElse(null);\n&#125;</code></pre>\n\n<h2 id=\"转换类：\"><a href=\"#转换类：\" class=\"headerlink\" title=\"转换类：\"></a>转换类：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import com.clewm.lcss.dto.DetailDTO;\nimport com.clewm.lcss.pojo.Detail;\nimport com.clewm.lcss.vo.DetailVO;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.factory.Mappers;\n\n@Mapper\npublic interface DetailConvert&#123;\n\n    DetailConvert INSTANCE &#x3D; Mappers.getMapper(DetailConvert.class);\n\n    Detail dto2po(DetailDTO detailDTO);\n\n    DetailVO po2vo(Detail detail);\n&#125;</code></pre>\n\n<h2 id=\"MyBatis分页插件：\"><a href=\"#MyBatis分页插件：\" class=\"headerlink\" title=\"MyBatis分页插件：\"></a>MyBatis分页插件：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * @author clewm\n *&#x2F;\n@Configuration\npublic class MyBatisPlusPaginationInnerConfig &#123;\n\n    &#x2F;**\n     * 分页插件\n     *&#x2F;\n    @Bean\n    public MybatisPlusInterceptor mybatisPlusInterceptor() &#123;\n        MybatisPlusInterceptor interceptor &#x3D; new MybatisPlusInterceptor();\n        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));\n        return interceptor;\n    &#125;\n\n&#125;</code></pre>\n\n\n\n<h2 id=\"Druid数据源配置：\"><a href=\"#Druid数据源配置：\" class=\"headerlink\" title=\"Druid数据源配置：\"></a>Druid数据源配置：</h2><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;lcss_person?characterEncoding&#x3D;UTF-8&amp;zeroDateTimeBehavior&#x3D;convertToNull&amp;useSSL&#x3D;false&amp;useJDBCCompliantTimezoneShift&#x3D;true&amp;useLegacyDatetimeCode&#x3D;false&amp;serverTimezone&#x3D;Asia&#x2F;Shanghai\n    username: root\n    password: 123567\n    druid:\n      min-idle: 10\n      max-active: 100\n      test-while-idle: true\n      test-on-borrow: true\n      time-between-eviction-runs-millis: 3000000 #设置创建的连接等待时长，单位毫秒</code></pre>\n\n<h2 id=\"Minio配置类：\"><a href=\"#Minio配置类：\" class=\"headerlink\" title=\"Minio配置类：\"></a>Minio配置类：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class MinioConfig &#123;\n\n    @Resource\n    private MinioProperties minioProperties;\n\n    @Bean\n    public MinioClient minioClient() &#123;\n        return MinioClient.builder()\n                .endpoint(minioProperties.getIp(),minioProperties.getPort(),false)\n                .credentials(minioProperties.getAccessKey(), minioProperties.getSecretKey())\n                .build();\n    &#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n@Data\n@Component\n@ConfigurationProperties(prefix &#x3D; &quot;minio&quot;)\npublic class MinioProperties &#123;\n\n    &#x2F;**\n     * minio服务器地址\n     *&#x2F;\n    private String ip;\n\n    &#x2F;**\n     * minio端口\n     *&#x2F;\n    private Integer port;\n\n    &#x2F;**\n     * 用户名\n     *&#x2F;\n    private String accessKey;\n\n    &#x2F;**\n     * 密码\n     *&#x2F;\n    private String secretKey;\n&#125;</code></pre>\n","text":"记录了一些可复用的代码，避免重复编写浪费精力。 可复用代码结果类：package com.clewm.lcss.res; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConst...","link":"","photos":[],"count_time":{"symbolsCount":"9.8k","symbolsTime":"9 mins."},"categories":[{"name":"技术","slug":"技术","count":6,"path":"api/categories/技术.json"},{"name":"开发常用","slug":"技术/开发常用","count":1,"path":"api/categories/技术/开发常用.json"}],"tags":[{"name":"Java","slug":"Java","count":6,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E5%A4%8D%E7%94%A8%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">可复用代码</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%9C%E7%B1%BB%EF%BC%9A\"><span class=\"toc-text\">结果类：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8A%B6%E6%80%81%E7%A0%81%EF%BC%9A\"><span class=\"toc-text\">状态码：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E5%B1%82%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E4%BB%A3%E7%A0%81%EF%BC%9A\"><span class=\"toc-text\">控制层的基本增删改查代码：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BD%AC%E6%8D%A2%E7%B1%BB%EF%BC%9A\"><span class=\"toc-text\">转换类：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#MyBatis%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6%EF%BC%9A\"><span class=\"toc-text\">MyBatis分页插件：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Druid%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE%EF%BC%9A\"><span class=\"toc-text\">Druid数据源配置：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Minio%E9%85%8D%E7%BD%AE%E7%B1%BB%EF%BC%9A\"><span class=\"toc-text\">Minio配置类：</span></a></li></ol></li></ol>","author":{"name":"CleWm","slug":"blog-author","avatar":"https://md-1259549904.cos.ap-shanghai.myqcloud.com/img/467a8fb87ff3c96961397cd53bcc2c0.jpg","link":"/","description":"记录学习 & 生活的碎片，欢迎参观！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"分布式Session","uid":"2ee2f111cfbae00cef07edd04fd1c972","slug":"Java/分布式Session","date":"2022-11-03T23:45:40.713Z","updated":"2022-11-03T23:47:10.776Z","comments":true,"path":"api/articles/Java/分布式Session.json","keywords":null,"cover":"https://md-1259549904.cos.ap-shanghai.myqcloud.com/img/4k%20%E5%88%9D%E9%9F%B3%20%E5%A5%B3%E5%AD%A9%20%E7%AC%9B%E5%AD%90%20%E9%95%BF%E5%8F%91%20%E9%95%BF%E8%A3%99%E5%AD%90%20%E5%8A%A8%E6%BC%AB%E5%A3%81%E7%BA%B8_%E5%BD%BC%E5%B2%B8%E5%9B%BE%E7%BD%91.jpg","text":" 分布式Session Session本质：session技术就是一种基于后端有别于数据库的临时存储数据的技术 存活时间：可以通过如下来设置一次Session的存活时间，在这个时间内若再次发送请求，则Session的存活时间将会刷新，若超过时间无请求发送，再次发送的时候会再次创建...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"技术","slug":"技术","count":6,"path":"api/categories/技术.json"},{"name":"分布式","slug":"技术/分布式","count":4,"path":"api/categories/技术/分布式.json"}],"tags":[{"name":"Java","slug":"Java","count":6,"path":"api/tags/Java.json"},{"name":"分布式","slug":"分布式","count":3,"path":"api/tags/分布式.json"}],"author":{"name":"CleWm","slug":"blog-author","avatar":"https://md-1259549904.cos.ap-shanghai.myqcloud.com/img/467a8fb87ff3c96961397cd53bcc2c0.jpg","link":"/","description":"记录学习 & 生活的碎片，欢迎参观！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"SkyWalking","uid":"61002d5c25b8c7e1297b605504df9169","slug":"Java/SkyWalking分布式链路追踪","date":"2022-08-19T22:55:50.542Z","updated":"2022-11-22T02:45:52.605Z","comments":true,"path":"api/articles/Java/SkyWalking分布式链路追踪.json","keywords":null,"cover":[],"text":"SkyWalking下载地址：http://skywalking.apache.org/downloads/概念：可实现基于Open Tracing规范的分布式链路追踪功能的APM应用性能管理平台 UI界面的jar包和配置文件（可修改端 口） 修改skywalking服务端数据存...","link":"","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[{"name":"技术","slug":"技术","count":6,"path":"api/categories/技术.json"},{"name":"分布式","slug":"技术/分布式","count":4,"path":"api/categories/技术/分布式.json"},{"name":"中间件","slug":"技术/分布式/中间件","count":2,"path":"api/categories/技术/分布式/中间件.json"},{"name":"分布式链路追踪","slug":"技术/分布式/中间件/分布式链路追踪","count":1,"path":"api/categories/技术/分布式/中间件/分布式链路追踪.json"}],"tags":[{"name":"Java","slug":"Java","count":6,"path":"api/tags/Java.json"},{"name":"分布式","slug":"分布式","count":3,"path":"api/tags/分布式.json"}],"author":{"name":"CleWm","slug":"blog-author","avatar":"https://md-1259549904.cos.ap-shanghai.myqcloud.com/img/467a8fb87ff3c96961397cd53bcc2c0.jpg","link":"/","description":"记录学习 & 生活的碎片，欢迎参观！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}