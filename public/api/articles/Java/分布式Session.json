{"title":"分布式Session","uid":"2ee2f111cfbae00cef07edd04fd1c972","slug":"Java/分布式Session","date":"2022-11-03T23:45:40.713Z","updated":"2022-11-03T23:47:10.776Z","comments":true,"path":"api/articles/Java/分布式Session.json","keywords":null,"cover":"https://md-1259549904.cos.ap-shanghai.myqcloud.com/img/4k%20%E5%88%9D%E9%9F%B3%20%E5%A5%B3%E5%AD%A9%20%E7%AC%9B%E5%AD%90%20%E9%95%BF%E5%8F%91%20%E9%95%BF%E8%A3%99%E5%AD%90%20%E5%8A%A8%E6%BC%AB%E5%A3%81%E7%BA%B8_%E5%BD%BC%E5%B2%B8%E5%9B%BE%E7%BD%91.jpg","content":"<p><img src=\"https://md-1259549904.cos.ap-shanghai.myqcloud.com/img/4k%20%E5%88%9D%E9%9F%B3%20%E5%A5%B3%E5%AD%A9%20%E7%AC%9B%E5%AD%90%20%E9%95%BF%E5%8F%91%20%E9%95%BF%E8%A3%99%E5%AD%90%20%E5%8A%A8%E6%BC%AB%E5%A3%81%E7%BA%B8_%E5%BD%BC%E5%B2%B8%E5%9B%BE%E7%BD%91.jpg\" alt=\"4k 初音 女孩 笛子 长发 长裙子 动漫壁纸_彼岸图网\"></p>\n<h1 id=\"分布式Session\"><a href=\"#分布式Session\" class=\"headerlink\" title=\"分布式Session\"></a>分布式Session</h1><img src=\"https://md-1259549904.cos.ap-shanghai.myqcloud.com/img/image-20220720101945526.png\" alt=\"image-20220720101945526\" style=\"zoom: 200%;\" />\n\n<h2 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h2><h3 id=\"本质：\"><a href=\"#本质：\" class=\"headerlink\" title=\"本质：\"></a>本质：</h3><p><strong>session技术就是一种基于后端有别于数据库的临时存储数据的技术</strong></p>\n<h3 id=\"存活时间：\"><a href=\"#存活时间：\" class=\"headerlink\" title=\"存活时间：\"></a>存活时间：</h3><p>可以通过如下来设置一次Session的存活时间，在这个时间内若再次发送请求，则Session的存活时间将会刷新，若超过时间无请求发送，再次发送的时候会再次创建一次新的Session会话。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">HttpSession session &#x3D; request.getSession();\nsession.setMaxInactiveInterval(2); &#x2F;&#x2F;单位是秒\n\nsession.getId(); &#x2F;&#x2F;查看session的唯一标识</code></pre>\n\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>添加redis官方的实现依赖即可，可以在配置类上添加如下注解，配置相关参数</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.session&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-session-data-redis&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;2.7.0&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>可以在配置类上添加如下注解，配置相关参数</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@EnableRedisHttpSession(maxInactiveIntervalInSeconds &#x3D; 3600 #Session的存活时间,redisNamespace &#x3D; &quot;session_info存储在redis中的命名空间&quot;,flushMode &#x3D; FlushMode.IMMEDIATE #刷新策略,saveMode &#x3D; SaveMode.ON_SET_ATTRIBUTE #刷新策略)</code></pre>\n\n<h4 id=\"刷新策略\"><a href=\"#刷新策略\" class=\"headerlink\" title=\"刷新策略\"></a>刷新策略</h4><ul>\n<li>ON_SAVE: 只有当SessionRepository.save(Session)方法被调用时,才会将session中的数据同步到redis中. 在web 应用中, 当请求完成响应后, 才开始同步. 也就是说在执行response之前session数据都是缓存在本地的.</li>\n<li>IMMEDIATE: 实时同步session 数据到redis. 当执行SessionRepository.createSession()时, 会将session数据同步到redis中;当对session的attribute进行set/remove 等操作时, 也会同步session中的数据到redis中.</li>\n</ul>\n<h4 id=\"保存策略\"><a href=\"#保存策略\" class=\"headerlink\" title=\"保存策略\"></a>保存策略</h4><p>保存Session属性更改的时机，是调用Set属性方法时保存还是Get属性方法调用的时候保存，还是总是保存，一般默认即可。</p>\n","text":" 分布式Session Session本质：session技术就是一种基于后端有别于数据库的临时存储数据的技术 存活时间：可以通过如下来设置一次Session的存活时间，在这个时间内若再次发送请求，则Session的存活时间将会刷新，若超过时间无请求发送，再次发送的时候会再次创建...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"技术","slug":"技术","count":6,"path":"api/categories/技术.json"},{"name":"分布式","slug":"技术/分布式","count":4,"path":"api/categories/技术/分布式.json"}],"tags":[{"name":"Java","slug":"Java","count":6,"path":"api/tags/Java.json"},{"name":"分布式","slug":"分布式","count":3,"path":"api/tags/分布式.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8FSession\"><span class=\"toc-text\">分布式Session</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Session\"><span class=\"toc-text\">Session</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E8%B4%A8%EF%BC%9A\"><span class=\"toc-text\">本质：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%98%E6%B4%BB%E6%97%B6%E9%97%B4%EF%BC%9A\"><span class=\"toc-text\">存活时间：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%B7%E6%96%B0%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">刷新策略</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BF%9D%E5%AD%98%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">保存策略</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"CleWm","slug":"blog-author","avatar":"https://md-1259549904.cos.ap-shanghai.myqcloud.com/img/467a8fb87ff3c96961397cd53bcc2c0.jpg","link":"/","description":"记录学习 & 生活的碎片，欢迎参观！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"25种设计模式代码示例","uid":"7b8b6ec466d1e9597a02dfeba735af86","slug":"Java/设计模式","date":"2022-12-17T02:49:17.450Z","updated":"2022-12-17T02:49:14.440Z","comments":true,"path":"api/articles/Java/设计模式.json","keywords":null,"cover":[],"text":"设计模式菜鸟设计模式： https://www.runoob.com/design-pattern/design-pattern-tutorial.html UML类图教程： https://blog.csdn.net/weixin_57504000/article/detail...","link":"","photos":[],"count_time":{"symbolsCount":"40k","symbolsTime":"37 mins."},"categories":[{"name":"技术","slug":"技术","count":6,"path":"api/categories/技术.json"},{"name":"设计模式","slug":"技术/设计模式","count":1,"path":"api/categories/技术/设计模式.json"},{"name":"开发常用","slug":"技术/设计模式/开发常用","count":1,"path":"api/categories/技术/设计模式/开发常用.json"}],"tags":[{"name":"Java","slug":"Java","count":6,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":1,"path":"api/tags/设计模式.json"}],"author":{"name":"CleWm","slug":"blog-author","avatar":"https://md-1259549904.cos.ap-shanghai.myqcloud.com/img/467a8fb87ff3c96961397cd53bcc2c0.jpg","link":"/","description":"记录学习 & 生活的碎片，欢迎参观！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"可复用代码","uid":"a790fe72b285743baec96ab6632ed42e","slug":"Java/可复用代码","date":"2022-11-02T01:20:37.454Z","updated":"2022-11-03T23:41:52.931Z","comments":true,"path":"api/articles/Java/可复用代码.json","keywords":null,"cover":"https://md-1259549904.cos.ap-shanghai.myqcloud.com/img/%E5%8F%A4%E9%A3%8E%20%E5%B1%85%E5%A3%AB%20%E9%BB%91%E7%99%BD%20%E7%BE%8E%E5%A5%B3%20%E5%A3%81%E7%BA%B8%204k_%E5%BD%BC%E5%B2%B8%E5%9B%BE%E7%BD%91.jpg","text":"记录了一些可复用的代码，避免重复编写浪费精力。 可复用代码结果类：package com.clewm.lcss.res; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConst...","link":"","photos":[],"count_time":{"symbolsCount":"9.8k","symbolsTime":"9 mins."},"categories":[{"name":"技术","slug":"技术","count":6,"path":"api/categories/技术.json"},{"name":"开发常用","slug":"技术/开发常用","count":1,"path":"api/categories/技术/开发常用.json"}],"tags":[{"name":"Java","slug":"Java","count":6,"path":"api/tags/Java.json"}],"author":{"name":"CleWm","slug":"blog-author","avatar":"https://md-1259549904.cos.ap-shanghai.myqcloud.com/img/467a8fb87ff3c96961397cd53bcc2c0.jpg","link":"/","description":"记录学习 & 生活的碎片，欢迎参观！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}